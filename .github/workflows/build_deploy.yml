name: Builds & Deploy Service

on: push

jobs:
  buildgoapi:
    name: "Build Go Api"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Go Dependencies
        uses: actions/setup-go@v3
        with:
          go-version: "1.23.2"

      - name: Build Go Application
        working-directory: go-api
        run: go build -o build/bootstrap cmd/app/main.go
        env:
          GOOS: linux
          GOARCH: amd64

      # - name: Prepare build content
      #   working-directory: go-api
      #   run: |
      #     cp -r images build/images
      #     cp -r fonts build/fonts
      #     cp -r docs build/docs

      - name: Zip the build content
        working-directory: go-api/build
        run: zip -r go.zip .

      - name: Upload zip file
        uses: actions/upload-artifact@v4
        with:
          name: go-package
          path: go-api/build/go.zip

  builddotnetapi:
    name: "Build Dotnet Api"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Publish Dotnet Application
        working-directory: dotnet-api
        run: dotnet publish -c Release -p:PublishReadyToRun=true --self-contained false -o publish

      - name: Zip the publish content
        working-directory: dotnet-api/publish
        run: zip -r dotnet.zip .

      - name: Upload zip file
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-package
          path: dotnet-api/publish/dotnet.zip

  deployapis:
    name: "Deploy Apis"
    needs: [buildgoapi, builddotnetapi]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: go-package
          path: terraform

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dotnet-package
          path: terraform

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get AWS Account ID
        id: aws_account
        run: echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Check if S3 Bucket for Terraform State Exists
        id: bucket-check
        run: |
          bucket_name="s3-terraform-state-${{ env.AWS_ACCOUNT_ID }}"
          if aws s3api head-bucket --bucket "$bucket_name" 2>/dev/null; then
            echo "bucket_exists=true" >> $GITHUB_ENV
          else
            echo "bucket_exists=false" >> $GITHUB_ENV
          fi

      - name: Create S3 Bucket
        if: env.bucket_exists == 'false'
        run: |
          bucket_name="s3-terraform-state-${{ env.AWS_ACCOUNT_ID }}"
          aws s3api create-bucket --bucket "$bucket_name" --region ${{ vars.AWS_REGION }}
          echo "Bucket $bucket_name created successfully."

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init -backend-config="bucket=s3-terraform-state-${{ env.AWS_ACCOUNT_ID }}" -backend-config="key=terraform/state.tfstate" -backend-config="region=${{ vars.AWS_REGION }}" -backend-config="encrypt=true"
        working-directory: ./terraform

      - name: List content of folder
        run: ls -l terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var="aws_region=${{ vars.AWS_REGION }}" -var="aws_dynamodb_table_name=${{ vars.AWS_DYNAMODB_TABLENAME }}"  -var="azure_tenant_id=${{ secrets.AZURE_TENANT_ID }}" -var="azure_client_id=${{ secrets.AZURE_CLIENT_ID }}" -var="azure_auth_scope=${{ secrets.AZURE_AUTH_SCOPE }}"
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply tfplan
        working-directory: ./terraform

      # - name: Create S3 Bucket
      #   run: |
      #     if ! aws dynamodb describe-table --table-name ${{ vars.AWS_DYNAMODB_TABLENAME }} >/dev/null 2>&1; then
      #       echo "DynamoDB table does not exist. Creating..."
      #       aws dynamodb create-table \
      #         --table-name ${{ vars.AWS_DYNAMODB_TABLENAME }} \
      #         --attribute-definitions AttributeName=Id,AttributeType=S \
      #         --key-schema AttributeName=Id,KeyType=HASH \
      #         --billing-mode PAY_PER_REQUEST
      #     else
      #       echo "DynamoDB table already exists."
      #     fi

      # - name: Create DynamoDB Table
      #   run: |
      #     if ! aws dynamodb describe-table --table-name ${{ vars.AWS_DYNAMODB_TABLENAME }} >/dev/null 2>&1; then
      #       echo "DynamoDB table does not exist. Creating..."
      #       aws dynamodb create-table \
      #         --table-name ${{ vars.AWS_DYNAMODB_TABLENAME }} \
      #         --attribute-definitions AttributeName=Id,AttributeType=S \
      #         --key-schema AttributeName=Id,KeyType=HASH \
      #         --billing-mode PAY_PER_REQUEST
      #     else
      #       echo "DynamoDB table already exists."
      #     fi

      # - name: Deploy Go Lambda Function
      #   run: |
      #     if ! aws lambda get-function --function-name ${{ vars.AWS_GO_LAMBDA_FUNCTION_NAME }} >/dev/null 2>&1; then
      #       echo "Go Lambda function does not exist. Creating..."
      #       aws lambda create-function --function-name ${{ vars.AWS_GO_LAMBDA_FUNCTION_NAME }} --runtime provided.al2 --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} --handler bootstrap --memory-size 1024 --timeout 30 --zip-file fileb://bootstrap.zip
      #     else
      #       aws lambda update-function-code \
      #         --function-name ${{ vars.AWS_GO_LAMBDA_FUNCTION_NAME }} \
      #         --zip-file fileb://bootstrap.zip
      #     fi

      # - name: Deploy Dotnet Lambda Function
      #   run: |
      #     if ! aws lambda get-function --function-name ${{ secrets.AWS_DOTNET_LAMBDA_FUNCTION_NAME }} >/dev/null 2>&1; then
      #       echo ".NET Lambda function does not exist. Creating..."
      #       aws lambda create-function --function-name ${{ vars.AWS_DOTNET_LAMBDA_FUNCTION_NAME }} --runtime dotnet8 --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} --handler DotnetApi --memory-size 1024 --timeout 30 --zip-file fileb://bootstrap.zip
      #     else
      #     aws lambda update-function-code \
      #       --function-name ${{ vars.AWS_GO_LAMBDA_FUNCTION_NAME }} \
      #       --zip-file fileb://bootstrap.zip
      # fi
      # - name: Deploy to AWS Lambda
      #   run: |
      #     aws lambda update-function-code \
      #       --function-name ${{ vars.AWS_GO_LAMBDA_FUNCTION_NAME }} \
      #       --zip-file fileb://bootstrap.zip

  # deploydotnetapi:
  #   name: "Deploy Dotnet Api"
  #   needs: [buildgoapi, builddotnetapi, deployinfra]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: dotnet-package

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ vars.AWS_REGION }}

  #     - name: Deploy Dotnet Lambda Function
  #       run: |
  #         if ! aws lambda get-function --function-name ${{ secrets.AWS_DOTNET_LAMBDA_FUNCTION_NAME }} >/dev/null 2>&1; then
  #           echo ".NET Lambda function does not exist. Creating..."
  #           aws lambda create-function \
  #             --function-name ${{ secrets.AWS_DOTNET_LAMBDA_FUNCTION_NAME }} \
  #             --runtime dotnet6 \
  #             --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} \
  #             --handler MyLambda::MyLambda.Function::FunctionHandler \
  #             --zip-file fileb://path/to/your/dotnet-function.zip
  #         else
  #           echo ".NET Lambda function already exists."
  #         fi

  # - name: Deploy to AWS Lambda
  #   run: |
  #     aws lambda update-function-code \
  #       --function-name ${{ vars.AWS_DOTNET_LAMBDA_FUNCTION_NAME }} \
  #       --zip-file fileb://bootstrap.zip
